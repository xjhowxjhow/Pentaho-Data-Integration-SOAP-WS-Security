<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>Password_Digest</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2023/02/17 11:03:31.963</created_date>
    <modified_user>-</modified_user>
    <modified_date>2023/02/17 11:03:31.963</modified_date>
    <key_for_session_key/>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>&lt;&lt;&lt; README Script</note>
      <xloc>704</xloc>
      <yloc>112</yloc>
      <width>117</width>
      <heigth>26</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <order>
    <hop>
      <from>DefineVariaveis</from>
      <to>UsernameTokenTags</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>UsernameTokenTags</from>
      <to>UsernameTokenTags Documento</to>
      <enabled>N</enabled>
    </hop>
  </order>
  <step>
    <name>DefineVariaveis</name>
    <type>RowGenerator</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <fields>
      <field>
        <name>password</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif>suasenha</nullif>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>nonce</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>criacao</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>expiracao</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>digest</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
      <field>
        <name>userid</name>
        <type>String</type>
        <format/>
        <currency/>
        <decimal/>
        <group/>
        <nullif/>
        <length>-1</length>
        <precision>-1</precision>
        <set_empty_string>N</set_empty_string>
      </field>
    </fields>
    <limit>1</limit>
    <never_ending>N</never_ending>
    <interval_in_ms/>
    <row_time_field/>
    <last_time_field/>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>464</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>UsernameTokenTags</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.text.Normalizer;
import java.util.Random;
import java.security.SecureRandom;
import java.util.Base64;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

import org.pentaho.di.core.exception.KettleException;



//GERA NONCE 

public static String geraStringRandomNonce() {
    SecureRandom random = new SecureRandom();
    byte[] nonceBytes = new byte[16];
    random.nextBytes(nonceBytes);

    Base64.Encoder encoder = Base64.getEncoder();
    String nonce = encoder.encodeToString(nonceBytes);

    return nonce;
}



// GERA CRIAÇÃO E EXPIRACAO 

// EM INDEX geraUTCtimeMS() INSTANCIA E ACESSA A LISTA
// tempo = geraUTCtimeMS()
// criacao = tempo[0]
// expiracao = tempo[1]

public static String[] geraUTCtimeMS() {
    ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC"));
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
    String utcTimeString = now.format(formatter);
    ZonedDateTime timePlus1Minute = now.plusMinutes(1);
    String timePlus1MinuteString = timePlus1Minute.format(formatter);

    return new String[] { utcTimeString, timePlus1MinuteString };
}



// Gera Combinação Disgegst Password_Digest = Base64 ( SHA-1 ( nonce + created + password ) )

public static String geraDigest(String created, String nonce, String password) {
    byte[] nonceDecoded = Base64.getDecoder().decode(nonce);
    byte[] createdBytes = created.getBytes(StandardCharsets.UTF_8);
    byte[] passwordBytes = password.getBytes(StandardCharsets.UTF_8);

    byte[] combina = new byte[nonceDecoded.length + createdBytes.length + passwordBytes.length];
    System.arraycopy(nonceDecoded, 0, combina, 0, nonceDecoded.length);
    System.arraycopy(createdBytes, 0, combina, nonceDecoded.length, createdBytes.length);
    System.arraycopy(passwordBytes, 0, combina, nonceDecoded.length + createdBytes.length, passwordBytes.length);

    MessageDigest messageDigest;
    try {
        messageDigest = MessageDigest.getInstance("SHA-1");
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException("Could not generate digest", e);
    }
    byte[] digest = messageDigest.digest(combina);

    return Base64.getEncoder().encodeToString(digest);
}



// Classe Padrao Pentaho para execucução de adicap de linhas


public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

	// ---- NAO MEXER ----
    Object[] r = getRow();
 
    if (r == null) {
        setOutputDone();
        return false;
    }
 
    if (first){
        first = false;
    }
 
    r = createOutputRow(r, data.outputRowMeta.size());
     
	// ---- NAO MEXER ----


	// get(Fields.In, "password")= (input) acessa  fild do step anterior

	// get(Fields.Out, "userid").setValue(x) = (output) define valor do fild no fluxo do step



    // Variavel password
    String password = get(Fields.In, "password").getString(r);
    
 
    // UsernameId aleatorio
    String usernametoken = "UsernameToken" + String.valueOf((long)(System.currentTimeMillis() * 10000000));
    get(Fields.Out, "userid").setValue(r, usernametoken);


    // cria variavel em bytes de tamanho 16
    String nonce = geraStringRandomNonce();
    get(Fields.Out, "nonce").setValue(r, nonce);
 
 

    // cria variavel criacao 
    String[] utcTimeMS = geraUTCtimeMS() ;
    get(Fields.Out, "criacao").setValue(r, utcTimeMS[0]);
    // cria variavel expiracao
    get(Fields.Out, "expiracao").setValue(r, utcTimeMS[1]);


    // cria variavel digest
    String digest = geraDigest(utcTimeMS[0], nonce, password);
    get(Fields.Out, "digest").setValue(r, digest);



    putRow(data.outputRowMeta, r);
 
    return true;
}</class_source>
      </definition>
    </definitions>
    <fields>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps/>
    <target_steps/>
    <usage_parameters/>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>UsernameTokenTags Documento</name>
    <type>UserDefinedJavaClass</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <definitions>
      <definition>
        <class_type>TRANSFORM_CLASS</class_type>
        <class_name>Processor</class_name>
        <class_source>import java.text.Normalizer; 																						// Importa a classe Normalizer (Classe do Java) para remover acentos e caracteres especiais
import java.util.Random; 																							// Importa a classe Random (Classe do Java) para gerar numeros aleatorios 
import java.security.SecureRandom; 																					// Importa a classe SecureRandom (Classe do Java) para gerar numeros aleatorios 
import java.util.Base64; 																							// Importa a classe Base64 (Classe do Java) para codificar e decodificar em Base64 
import java.nio.charset.StandardCharsets; 																			// Importa a classe StandardCharsets (Classe do Java) para codificar e decodificar em Base64 
import java.security.MessageDigest; 																				// Importa a classe MessageDigest (Classe do Java) para gerar o digest da senha
import java.security.NoSuchAlgorithmException; 																		// Importa a classe NoSuchAlgorithmException (Classe do Java) para gerar o digest da senha
import java.time.Instant; 																							// Importa a classe Instant (Classe do Java) para gerar a data e hora atual
import java.time.ZoneId; 																							// Importa a classe ZoneId (Classe do Java) para solicitar data e hora atual UTC
import java.time.ZonedDateTime; 																					// Importa a classe ZonedDateTime (Classe do Java) para gerar a data e hora atual UTC 
import java.time.format.DateTimeFormatter; 																			// Importa a classe DateTimeFormatter (Classe do Java) para gerar a data e hora atual Formatado

import org.pentaho.di.core.exception.KettleException; 																// Importa a classe KettleException PENATHO padrao para tratamento de erros via PDI 



//GERA NONCE 

public static String geraStringRandomNonce() {
    SecureRandom random = new SecureRandom(); 																		// Cria uma variavel do tipo SecureRandom (Classe do Java) para gerar numeros aleatorios 
    byte[] nonceBytes = new byte[16]; 																				// Cria um array de bytes com o tamanho de 16 bytes
    random.nextBytes(nonceBytes); 																					// Gera 16 bytes aleatorios e armazena no array de bytes acima (OBS: de acordo cm o OASIS, o nonce deve ter 16 bytes de tamanho = 128BITS)

    Base64.Encoder encoder = Base64.getEncoder(); 																	// Cria uma variavel do tipo Encoder (Classe do Java) para codificar o nonce em Base64
    String nonce = encoder.encodeToString(nonceBytes); 																// Codifica o nonce em Base64 e armazena na variavel nonce

    return nonce; 																									// Retorna o nonce codificado em Base64
}



// GERA CRIAÇÃO E EXPIRACAO 

// Em INDEX, geraUTCtimeMS() Para acessar precisa instaciar e acessar os Index 0/1
// tempo = geraUTCtimeMS()
// criacao = tempo[0]
// expiracao = tempo[1]

public static String[] geraUTCtimeMS() {
    ZonedDateTime now = ZonedDateTime.now(ZoneId.of("UTC")); 														// Pega a data e hora atual no fuso horário UTC
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"); 						// Formata a data e hora para o padrão exigido pela API
    String utcTimeString = now.format(formatter); 																	// Formata a data e hora atual
    ZonedDateTime timePlus1Minute = now.plusMinutes(1); 															// Adiciona 1 minuto a data e hora atual
    String timePlus1MinuteString = timePlus1Minute.format(formatter); 												// Formata a data e hora atual + 1 minuto

    return new String[] { utcTimeString, timePlus1MinuteString }; 													// Retorna a data e hora atual e a data e hora atual + 1 minuto
}



// Gera Combinação Disgegst Password_Digest = Base64 ( SHA-1 ( nonce + created + password ) )

public static String geraDigest(String created, String nonce, String password) {
    byte[] nonceDecoded = Base64.getDecoder().decode(nonce); 														// Decodifica o nonce em bytes
    byte[] createdBytes = created.getBytes(StandardCharsets.UTF_8); 												// Converte a string created em bytes 
    byte[] passwordBytes = password.getBytes(StandardCharsets.UTF_8); 												// Converte a string password em bytes 

    byte[] combina = new byte[nonceDecoded.length + createdBytes.length + passwordBytes.length]; 					// Cria um array de bytes com o tamanho da combinação de bytes acima
    System.arraycopy(nonceDecoded, 0, combina, 0, nonceDecoded.length); 											// Copia os bytes do nonce para o array de bytes 
    System.arraycopy(createdBytes, 0, combina, nonceDecoded.length, createdBytes.length); 							// Copia os bytes do created para o array de bytes 
    System.arraycopy(passwordBytes, 0, combina, nonceDecoded.length + createdBytes.length, passwordBytes.length); 	// Copia os bytes do password para o array de bytes 

    MessageDigest messageDigest; 																					// Cria uma variavel do tipo MessageDigest (Classe do Java) 
    try { 																											// Tenta gerar o digest
        messageDigest = MessageDigest.getInstance("SHA-1"); 														// Gera o digest com o algoritmo SHA-1 (Classe do Java) 
        
    } catch (NoSuchAlgorithmException e) { 																			// Caso não consiga, lança uma exceção
        throw new RuntimeException("Nao foi possivel Gerar", e); 													// RuntimeException é uma exceção não verificada de acordo com a ducumentação
    }
    byte[] digest = messageDigest.digest(combina); 																	// Gera o digest da combinação de bytes acima e armazena em digest (byte[])

    return Base64.getEncoder().encodeToString(digest);																// Retorna o digest em String
}



// Classe Padrao Pentaho para execucução de adicap de linhas


public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException
{

	// ---- NAO MEXER ----
    Object[] r = getRow(); 																							// Pega uma linha do fluxo de entrada, se não tiver mais linhas, r = null
 
    if (r == null) { 																								// Se r = null, não tem mais linhas, então finaliza o step
        setOutputDone(); 																							// Finaliza o step  
    }
 
    if (first){ 																									// Se for a primeira linha, inicializa o step
        first = false;  
    }
 
    r = createOutputRow(r, data.outputRowMeta.size()); 																// Cria uma nova linha com os campos de saída
     
	// ---- NAO MEXER ----


	// get(Fields.In, "password")= (input) acessa  fild do step anterior

	// get(Fields.Out, "userid").setValue(x) = (output) define valor do fild no fluxo do step



    // Cria Variavel password
    String password = get(Fields.In, "password").getString(r); 														// Pega o valor do campo password do step anterior e armazena em password (String)
    
 
    // Cria UsernameId aleatorio																					// Para ser utilziado no UsernameToken ID =
    String usernametoken = "UsernameToken-" + String.valueOf((long)(System.currentTimeMillis() * 10000000)); 		// Gera um username aleatorio
    get(Fields.Out, "userid").setValue(r, usernametoken);															// Define o valor do campo userid no fluxo do step atual


    // Cria variavel em bytes de tamanho 16
    String nonce = geraStringRandomNonce(); 																		// Gera um nonce aleatorio
    get(Fields.Out, "nonce").setValue(r, nonce); 																	// Define o valor do campo nonce no fluxo do step atual
 
 

    // Cria variavel criacao 
    String[] utcTimeMS = geraUTCtimeMS() ; 																			// Gera a data de criação e expiração
    get(Fields.Out, "criacao").setValue(r, utcTimeMS[0]); 															// Define o valor do campo criacao no fluxo do step atual 
    // cria variavel expiracao
    get(Fields.Out, "expiracao").setValue(r, utcTimeMS[1]); 														// Define o valor do campo expiracao no fluxo do step atual


    // Cria variavel digest
    String digest = geraDigest(utcTimeMS[0], nonce, password); 														// Gera o digest
    get(Fields.Out, "digest").setValue(r, digest); 																	// Define o valor do campo digest no fluxo do step atual



    putRow(data.outputRowMeta, r); 																					// Envia a linha para o próximo step
 
    return true; 																									// Retorna true para indicar que o step foi executado com sucesso
}</class_source>
      </definition>
    </definitions>
    <fields>
    </fields>
    <clear_result_fields>N</clear_result_fields>
    <info_steps/>
    <target_steps/>
    <usage_parameters/>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>608</xloc>
      <yloc>112</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes/>
</transformation>
